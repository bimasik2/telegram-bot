import telebot
import requests
import json
import random
import time
import threading
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', "8404206641:AAEwYOgnkoo1USe7Ckqtxq7e0CXy-qBdEWQ")
ADMIN_IDS = [123456789]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

bot = telebot.TeleBot(BOT_TOKEN)

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "user_data.json"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_user_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                return data
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    return {"balances": {}, "last_used": {}}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_user_data():
    try:
        if hasattr(farm_money, 'user_balances') and hasattr(farm_money, 'last_used'):
            data = {
                "balances": farm_money.user_balances,
                "last_used": farm_money.last_used
            }
            with open(DATA_FILE, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
def autosave_worker():
    while True:
        time.sleep(300)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        save_user_data()

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–æ—Å—Å–æ–≤ —Å –∞–≤—Ç–æ-—Å–ø–∞–≤–Ω–æ–º
boss_data = {
    "active": False,
    "hp": 0,
    "max_hp": 0,
    "name": "", 
    "reward": 0,
    "attackers": {},
    "stunned_players": {},
    "message_id": None,
    "chat_id": None,
    "last_spawn_time": 0
}

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
chat_last_activity = {}
user_activity = {}
top_last_used = {}
attack_last_used = {}
casino_last_used = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
user_data = load_user_data()

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ-—Å–ø–∞–≤–Ω–∞ –±–æ—Å—Å–∞
def auto_spawn_boss():
    while True:
        try:
            current_time = time.time()
            
            # –°–ø–∞–≤–Ω–∏–º –∫–∞–∂–¥—ã–µ 25 –º–∏–Ω—É—Ç (1500 —Å–µ–∫—É–Ω–¥)
            if not boss_data["active"] and current_time - boss_data["last_spawn_time"] > 1500:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã (–≥–¥–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)
                active_chats = []
                for chat_id, last_activity in chat_last_activity.items():
                    if current_time - last_activity < 3600:  # 1 —á–∞—Å
                        active_chats.append(chat_id)
                
                if active_chats:
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
                    chat_id = random.choice(active_chats)
                    
                    # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Å—Å–∞
                    bosses = [
                        {"name": "üî• –û–≥–Ω–µ–Ω–Ω—ã–π –î—Ä–∞–∫–æ–Ω", "hp": 10000, "reward": 5000},
                        {"name": "‚ùÑÔ∏è –õ–µ–¥—è–Ω–æ–π –ì–∏–≥–∞–Ω—Ç", "hp": 8000, "reward": 4000},
                        {"name": "‚ö° –≠–ª–µ–∫—Ç—Ä–æ –ì–æ–ª–µ–º", "hp": 12000, "reward": 6000},
                        {"name": "üå™Ô∏è –í–∏—Ö—Ä–µ–≤–æ–π –î–µ–º–æ–Ω", "hp": 9000, "reward": 4500},
                        {"name": "üíÄ –ö–æ—Ä–æ–ª—å –¢–µ–Ω–µ–π", "hp": 15000, "reward": 7500}
                    ]
                    
                    boss = random.choice(bosses)
                    boss_data.update({
                        "active": True,
                        "hp": boss["hp"],
                        "max_hp": boss["hp"],
                        "name": boss["name"],
                        "reward": boss["reward"],
                        "attackers": {},
                        "stunned_players": {},
                        "message_id": None,
                        "chat_id": chat_id,
                        "last_spawn_time": current_time
                    })
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∞—Ç–∞–∫–∏
                    markup = telebot.types.InlineKeyboardMarkup()
                    attack_button = telebot.types.InlineKeyboardButton(
                        text="‚öîÔ∏è –ê–¢–ê–ö–û–í–ê–¢–¨", 
                        callback_data="boss_attack"
                    )
                    markup.add(attack_button)
                    
                    boss_text = f"üéØ –ü–û–Ø–í–ò–õ–°–Ø –ë–û–°–°!\n\n{boss['name']}\nHP: {boss['hp']}/{boss['hp']}\n\n–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–±–µ–¥—É: {boss['reward']}‚ÇΩ\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –∞—Ç–∞–∫–æ–≤–∞—Ç—å!"
                    sent_message = bot.send_message(chat_id, boss_text, reply_markup=markup)
                    boss_data["message_id"] = sent_message.message_id
                    
                    print(f"ü¶ñ –ë–æ—Å—Å –∑–∞—Å–ø–∞–≤–Ω–∏–ª—Å—è –≤ —á–∞—Ç–µ {chat_id}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –æ–≥–ª—É—à–µ–Ω–∏—è
                    start_stun_system()
            
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ-—Å–ø–∞–≤–Ω–µ –±–æ—Å—Å–∞: {e}")
            time.sleep(60)

# –°–∏—Å—Ç–µ–º–∞ –æ–≥–ª—É—à–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
def start_stun_system():
    def stun_worker():
        stun_count = 0
        while boss_data["active"] and stun_count < 3:
            try:
                # –ñ–¥–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –æ–≥–ª—É—à–µ–Ω–∏—è–º–∏ (5-15 —Å–µ–∫—É–Ω–¥)
                stun_delay = random.randint(5, 15)
                time.sleep(stun_delay)
                
                if boss_data["active"] and boss_data["attackers"]:
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞—Ç–∞–∫—É—é—â–µ–≥–æ –¥–ª—è –æ–≥–ª—É—à–µ–Ω–∏—è
                    attackers_list = list(boss_data["attackers"].keys())
                    if attackers_list:
                        stunned_player = random.choice(attackers_list)
                        
                        # –û–≥–ª—É—à–∞–µ–º –Ω–∞ 20 —Å–µ–∫—É–Ω–¥
                        stun_end_time = time.time() + 20
                        boss_data["stunned_players"][stunned_player] = stun_end_time
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ —á–∞—Ç–µ
                        try:
                            user_info = bot.get_chat(stunned_player)
                            username = f"@{user_info.username}" if user_info.username else user_info.first_name
                            stun_message = f"üí´ {username} –æ–≥–ª—É—à–µ–Ω –±–æ—Å—Å–æ–º! –ù–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å 20 —Å–µ–∫—É–Ω–¥!"
                            bot.send_message(boss_data["chat_id"], stun_message)
                        except:
                            pass
                        
                        stun_count += 1
                        print(f"üí´ –ò–≥—Ä–æ–∫ {stunned_player} –æ–≥–ª—É—à–µ–Ω")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –æ–≥–ª—É—à–µ–Ω–∏—è: {e}")
                time.sleep(5)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–≥–ª—É—à–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    stun_thread = threading.Thread(target=stun_worker, daemon=True)
    stun_thread.start()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞—Ç–∞–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "boss_attack")
def handle_boss_attack(call):
    try:
        if not boss_data["active"]:
            bot.answer_callback_query(call.id, "‚ùå –ë–æ—Å—Å —É–∂–µ –ø–æ–±–µ–∂–¥–µ–Ω!")
            return
        
        user_id = call.from_user.id
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥–ª—É—à–µ–Ω–∏–µ
        if user_id in boss_data["stunned_players"]:
            stun_remaining = boss_data["stunned_players"][user_id] - current_time
            if stun_remaining > 0:
                bot.answer_callback_query(
                    call.id, 
                    f"‚ùå –í—ã –æ–≥–ª—É—à–µ–Ω—ã! –ñ–¥–∏—Ç–µ {int(stun_remaining)} —Å–µ–∫—É–Ω–¥", 
                    show_alert=True
                )
                return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–¥ –∞—Ç–∞–∫–∏ (3 —Å–µ–∫—É–Ω–¥—ã)
        if user_id in attack_last_used:
            time_passed = current_time - attack_last_used[user_id]
            if time_passed < 3:
                bot.answer_callback_query(call.id, "‚ùå –ê—Ç–∞–∫–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è!", show_alert=True)
                return
        
        attack_last_used[user_id] = current_time
        
        # –£—Ä–æ–Ω –æ—Ç 100 –¥–æ 500
        damage = random.randint(100, 500)
        boss_data["hp"] -= damage
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Ä–æ–Ω –∏–≥—Ä–æ–∫–∞
        if user_id not in boss_data["attackers"]:
            boss_data["attackers"][user_id] = {"damage": 0, "username": call.from_user.first_name}
        
        boss_data["attackers"][user_id]["damage"] += damage
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–æ—Å—Å–æ–º
        hp_percent = (boss_data["hp"] / boss_data["max_hp"]) * 100
        progress_bar = "‚ñà" * int(hp_percent / 10) + "‚ñë" * (10 - int(hp_percent / 10))
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = telebot.types.InlineKeyboardMarkup()
        attack_button = telebot.types.InlineKeyboardButton(
            text="‚öîÔ∏è –ê–¢–ê–ö–û–í–ê–¢–¨", 
            callback_data="boss_attack"
        )
        markup.add(attack_button)
        
        boss_text = f"üéØ –ë–û–°–° –ê–¢–ê–ö–£–ï–¢!\n\n{boss_data['name']}\n{progress_bar} {boss_data['hp']}/{boss_data['max_hp']} HP\n\n–ù–∞–≥—Ä–∞–¥–∞: {boss_data['reward']}‚ÇΩ\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –∞—Ç–∞–∫–æ–≤–∞—Ç—å!"
        
        try:
            bot.edit_message_text(
                chat_id=boss_data["chat_id"],
                message_id=boss_data["message_id"],
                text=boss_text,
                reply_markup=markup
            )
        except:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        if boss_data["hp"] <= 0:
            # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –≤—Å–µ—Ö –∞—Ç–∞–∫—É—é—â–∏—Ö
            winners_text = f"üéâ –ë–û–°–° –ü–û–ë–ï–ñ–î–ï–ù!\n\n{boss_data['name']} —É–Ω–∏—á—Ç–æ–∂–µ–Ω!\n\n"
            total_reward = boss_data["reward"]
            
            for attacker_id, data in boss_data["attackers"].items():
                reward = total_reward + data["damage"] // 5
                if attacker_id not in farm_money.user_balances:
                    farm_money.user_balances[attacker_id] = 0
                farm_money.user_balances[attacker_id] += reward
                
                try:
                    user_info = bot.get_chat(attacker_id)
                    username = f"@{user_info.username}" if user_info.username else data["username"]
                except:
                    username = data["username"]
                
                winners_text += f"{username} +{reward}‚ÇΩ (—É—Ä–æ–Ω: {data['damage']})\n"
            
            bot.send_message(boss_data["chat_id"], winners_text)
            boss_data["active"] = False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã –Ω–∞–¥ –±–æ—Å—Å–æ–º
            save_user_data()
        
        bot.answer_callback_query(call.id, f"‚úÖ –ù–∞–Ω–µ—Å–µ–Ω–æ {damage} —É—Ä–æ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Ç–∞–∫–µ –±–æ—Å—Å–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –∞—Ç–∞–∫–∏!")

# –§—É–Ω–∫—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def reminder_worker():
    while True:
        try:
            current_time = time.time()
            for chat_id, last_activity in list(chat_last_activity.items()):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—à–ª–æ –ª–∏ 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)
                if current_time - last_activity > 600:
                    try:
                        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –≤—ã –¥–∞–≤–Ω–æ –º–Ω–æ—é –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å‚òπÔ∏è /farma")
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                        chat_last_activity[chat_id] = current_time
                    except:
                        # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ - —É–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                        if chat_id in chat_last_activity:
                            del chat_last_activity[chat_id]
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö: {e}")
            time.sleep(60)

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
reminder_thread = threading.Thread(target=reminder_worker, daemon=True)
reminder_thread.start()

boss_auto_spawn_thread = threading.Thread(target=auto_spawn_boss, daemon=True)
boss_auto_spawn_thread.start()

autosave_thread = threading.Thread(target=autosave_worker, daemon=True)
autosave_thread.start()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        welcome_text = "–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ –±–æ—Ç Minerdodster203 –¥–ª—è —á–∞—Ç–∞ –º–∏–Ω–µ—Ä–∞203, –¥–æ–±–∞–≤—å –º–µ–Ω—è –≤ —Å–≤–æ–π —á–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π /add, /help –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã"
        bot.reply_to(message, welcome_text)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /add
@bot.message_handler(commands=['add'])
def add_to_chat(message):
    try:
        markup = telebot.types.InlineKeyboardMarkup()
        url_button = telebot.types.InlineKeyboardButton(
            text="–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–≤–æ–π —á–∞—Ç", 
            url="https://t.me/Dodsterchat203_bot?startgroup=true"
        )
        markup.add(url_button)
        bot.send_message(
            message.chat.id, 
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≤–∞—à —á–∞—Ç:", 
            reply_markup=markup
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /add: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def send_help(message):
    try:
        help_text = "—Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥:\n/farma-—Ñ–∞—Ä–º–∏—Ç—å –±–∞–±–æ—Å–∏–∫–∏\n/top-—Ç–æ–ø —Ñ–∞—Ä–º–µ—Ä–æ–≤\n/casino-–∏–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ\n\n‚öîÔ∏è –ë–æ—Å—Å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 25 –º–∏–Ω—É—Ç!"
        bot.reply_to(message, help_text)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /help: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /top —Å –∫–¥ 25 —Å–µ–∫—É–Ω–¥ (35 –ò–ì–†–û–ö–û–í)
@bot.message_handler(commands=['top'])
def show_top_users(message):
    try:
        user_id = message.from_user.id
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–¥
        if user_id in top_last_used:
            time_passed = current_time - top_last_used[user_id]
            if time_passed < 25:
                remaining_time = 25 - int(time_passed)
                bot.reply_to(message, f"‚ùå–¢–æ–ø –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ 25 —Å–µ–∫—É–Ω–¥. –ü–æ–¥–æ–∂–¥–∏ {remaining_time} —Å–µ–∫—É–Ω–¥‚ùå")
                return
        
        top_last_used[user_id] = current_time
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–∞—Ç–∞
        if message.chat.type in ['group', 'supergroup']:
            chat_last_activity[message.chat.id] = time.time()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É (35 –ò–ì–†–û–ö–û–í)
        if hasattr(farm_money, 'user_balances') and farm_money.user_balances:
            sorted_users = sorted(farm_money.user_balances.items(), key=lambda x: x[1], reverse=True)[:35]
            
            top_text = "üèÜ –¢–æ–ø 35 —Ñ–∞—Ä–º–µ—Ä–æ–≤ flipper zero:\n\n"
            for i, (user_id, balance) in enumerate(sorted_users, 1):
                try:
                    user_info = bot.get_chat(user_id)
                    username = f"@{user_info.username}" if user_info.username else user_info.first_name
                    # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
                    if len(username) > 20:
                        username = username[:20] + "..."
                    top_text += f"{i}. {username} - {balance}‚ÇΩ\n"
                except:
                    top_text += f"{i}. ID:{user_id} - {balance}‚ÇΩ\n"
        else:
            top_text = "üìä –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Ñ–∞—Ä–º–∏–ª. –ë—É–¥—å –ø–µ—Ä–≤—ã–º! /farma"
        
        bot.reply_to(message, top_text)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /top: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /casino
@bot.message_handler(commands=['casino'])
def casino_game(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–¥ 30 —Å–µ–∫—É–Ω–¥
        user_id = message.from_user.id
        current_time = time.time()
        
        if user_id in casino_last_used:
            time_passed = current_time - casino_last_used[user_id]
            if time_passed < 30:
                remaining_time = 30 - int(time_passed)
                bot.reply_to(message, f"‚ùå –ö–∞–∑–∏–Ω–æ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è! –ñ–¥–∏ {remaining_time} —Å–µ–∫—É–Ω–¥")
                return
        
        casino_last_used[user_id] = current_time
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in farm_money.user_balances:
            farm_money.user_balances[user_id] = 0
        
        balance = farm_money.user_balances[user_id]
        
        if balance < 100:
            bot.reply_to(message, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 100‚ÇΩ. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–Ω–∞–∫–æ–ø–∏!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏
        markup = telebot.types.InlineKeyboardMarkup(row_width=3)
        buttons = [
            telebot.types.InlineKeyboardButton("100‚ÇΩ", callback_data="casino_bet:100"),
            telebot.types.InlineKeyboardButton("500‚ÇΩ", callback_data="casino_bet:500"),
            telebot.types.InlineKeyboardButton("1000‚ÇΩ", callback_data="casino_bet:1000"),
            telebot.types.InlineKeyboardButton("2000‚ÇΩ", callback_data="casino_bet:2000"),
            telebot.types.InlineKeyboardButton("5000‚ÇΩ", callback_data="casino_bet:5000"),
            telebot.types.InlineKeyboardButton("–í–°–Å üí∞", callback_data="casino_bet:all")
        ]
        markup.add(*buttons)
        
        casino_text = f"üé∞ –ö–ê–ó–ò–ù–û Flipper Zero\n\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\n\n–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:"
        bot.send_message(message.chat.id, casino_text, reply_markup=markup)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /casino: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞–≤–æ–∫ –≤ –∫–∞–∑–∏–Ω–æ
@bot.callback_query_handler(func=lambda call: call.data.startswith('casino_bet:'))
def handle_casino_bet(call):
    try:
        user_id = call.from_user.id
        bet_data = call.data.split(':')[1]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        if user_id not in farm_money.user_balances:
            farm_money.user_balances[user_id] = 0
        
        balance = farm_money.user_balances[user_id]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
        if bet_data == "all":
            bet_amount = balance
        else:
            bet_amount = int(bet_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∫–∏
        if bet_amount < 100:
            bot.answer_callback_query(call.id, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 100‚ÇΩ!", show_alert=True)
            return
        
        if bet_amount > balance:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
            return
        
        if bet_amount > 10000:
            bot.answer_callback_query(call.id, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 10,000‚ÇΩ!", show_alert=True)
            return
        
        # –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        result = random.random()
        
        if result < 0.45:
            outcome = "lose"
            multiplier = 0
            win_amount = -bet_amount
            result_text = "üíî –ü–†–û–ò–ì–†–´–®"
            emoji = "üíî"
        
        elif result < 0.90:
            outcome = "win"
            multiplier = 1
            win_amount = bet_amount
            result_text = "‚úÖ –í–´–ò–ì–†–´–® x1"
            emoji = "‚úÖ"
        
        elif result < 0.98:
            outcome = "double"
            multiplier = 2
            win_amount = bet_amount * 2
            result_text = "üéâ –£–î–í–û–ï–ù–ò–ï x2"
            emoji = "üéâ"
        
        else:
            outcome = "jackpot"
            multiplier = 5
            win_amount = bet_amount * 5
            result_text = "üé∞ –î–ñ–ï–ö–ü–û–¢ x5"
            emoji = "üé∞"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        farm_money.user_balances[user_id] += win_amount
        new_balance = farm_money.user_balances[user_id]
        
        # –°–û–•–†–ê–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –ü–û–°–õ–ï –ò–ì–†–´
        save_user_data()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if win_amount > 0:
            result_message = f"{emoji} {result_text}\n\n–°—Ç–∞–≤–∫–∞: {bet_amount}‚ÇΩ\n–í—ã–∏–≥—Ä—ã—à: +{win_amount}‚ÇΩ\n\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ"
        else:
            result_message = f"{emoji} {result_text}\n\n–°—Ç–∞–≤–∫–∞: {bet_amount}‚ÇΩ\n–ü—Ä–æ–∏–≥—Ä—ã—à: {win_amount}‚ÇΩ\n\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=result_message
        )
        
        bot.answer_callback_query(call.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≤ –∫–∞–∑–∏–Ω–æ!", show_alert=True)

# –ö–æ–º–∞–Ω–¥–∞ /farma
@bot.message_handler(commands=['farma'])
def farm_money(message):
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö –ò–ó –§–ê–ô–õ–ê
        if not hasattr(farm_money, 'user_balances'):
            farm_money.user_balances = user_data.get("balances", {})
        if not hasattr(farm_money, 'last_used'):
            farm_money.last_used = user_data.get("last_used", {})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        if user_id not in user_activity:
            user_activity[user_id] = 0
        user_activity[user_id] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–∞—Ç–∞
        if message.chat.type in ['group', 'supergroup']:
            chat_last_activity[message.chat.id] = time.time()
        
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–¥
        if user_id in farm_money.last_used:
            time_passed = current_time - farm_money.last_used[user_id]
            if time_passed < 240:
                remaining_time = 240 - int(time_passed)
                bot.reply_to(message, f"‚ùå–≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫—É–Ω–¥‚ùå")
                return
        
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–≥
        farmed_amount = random.randint(800, 1900)
        
        if user_id not in farm_money.user_balances:
            farm_money.user_balances[user_id] = 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        new_balance = farm_money.user_balances[user_id] + farmed_amount
        if new_balance > 60000:
            new_balance = 60000
            farmed_amount = 60000 - farm_money.user_balances[user_id]
        
        farm_money.user_balances[user_id] = new_balance
        farm_money.last_used[user_id] = current_time
        
        # –°–û–•–†–ê–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –ü–û–°–õ–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø
        save_user_data()
        
        response_text = f"ü§ë–≤—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Ñ–∞—Ä–º–∏–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ flipper zero, –≤–∞–º –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–Ω–æ {farmed_amount}‚ÇΩ, –≤–∞—à –±–∞–ª–∞–Ω—Å {new_balance}‚ÇΩ/60000‚ÇΩü§ë"
        bot.reply_to(message, response_text)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /farma: {e}")

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
@bot.message_handler(content_types=['new_chat_members'])
def welcome_new_member(message):
    try:
        for new_member in message.new_chat_members:
            if new_member.id == bot.get_me().id:
                welcome_text = "–ó–¥–∞—Ä–æ–≤–∞! –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /farma —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ñ–∞—Ä–º–∏—Ç—å –Ω–∞ –≤–µ–ª–∏–∫–∏–π flipper"
                bot.send_message(message.chat.id, welcome_text)
                chat_last_activity[message.chat.id] = time.time()
                break
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏: {e}")

# –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
@bot.message_handler(func=lambda message: True)
def update_activity(message):
    try:
        if message.chat.type in ['group', 'supergroup']:
            chat_last_activity[message.chat.id] = time.time()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç Minerdodster203 –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    while True:
        try:
            print("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram API...")
            bot.polling(
                none_stop=True,
                timeout=30,
                long_polling_timeout=30
            )
        except requests.exceptions.ConnectionError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)
        except Exception as e:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)